

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Fri Nov 22 10:57:15 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	maintext,global,class=CODE,split=1,delta=2
     7                           	psect	text1,local,class=CODE,merge=1,delta=2
     8                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
     9                           	dabs	1,0x7E,2
    10     0000                     
    11                           ; Generated 22/03/2023 GMT
    12                           ; 
    13                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    14                           ; All rights reserved.
    15                           ; 
    16                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    17                           ; 
    18                           ; Redistribution and use in source and binary forms, with or without modification, are
    19                           ; permitted provided that the following conditions are met:
    20                           ; 
    21                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    22                           ;        conditions and the following disclaimer.
    23                           ; 
    24                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    25                           ;        of conditions and the following disclaimer in the documentation and/or other
    26                           ;        materials provided with the distribution. Publication is not required when
    27                           ;        this file is used in an embedded application.
    28                           ; 
    29                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    30                           ;        software without specific prior written permission.
    31                           ; 
    32                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    33                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    34                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    35                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    36                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    37                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    38                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    39                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    40                           ; 
    41                           ; 
    42                           ; Code-generator required, PIC16F877A Definitions
    43                           ; 
    44                           ; SFR Addresses
    45     0000                     	;# 
    46     0001                     	;# 
    47     0002                     	;# 
    48     0003                     	;# 
    49     0004                     	;# 
    50     0005                     	;# 
    51     0006                     	;# 
    52     0007                     	;# 
    53     0008                     	;# 
    54     0009                     	;# 
    55     000A                     	;# 
    56     000B                     	;# 
    57     000C                     	;# 
    58     000D                     	;# 
    59     000E                     	;# 
    60     000E                     	;# 
    61     000F                     	;# 
    62     0010                     	;# 
    63     0011                     	;# 
    64     0012                     	;# 
    65     0013                     	;# 
    66     0014                     	;# 
    67     0015                     	;# 
    68     0015                     	;# 
    69     0016                     	;# 
    70     0017                     	;# 
    71     0018                     	;# 
    72     0019                     	;# 
    73     001A                     	;# 
    74     001B                     	;# 
    75     001B                     	;# 
    76     001C                     	;# 
    77     001D                     	;# 
    78     001E                     	;# 
    79     001F                     	;# 
    80     0081                     	;# 
    81     0085                     	;# 
    82     0086                     	;# 
    83     0087                     	;# 
    84     0088                     	;# 
    85     0089                     	;# 
    86     008C                     	;# 
    87     008D                     	;# 
    88     008E                     	;# 
    89     0091                     	;# 
    90     0092                     	;# 
    91     0093                     	;# 
    92     0094                     	;# 
    93     0098                     	;# 
    94     0099                     	;# 
    95     009C                     	;# 
    96     009D                     	;# 
    97     009E                     	;# 
    98     009F                     	;# 
    99     010C                     	;# 
   100     010D                     	;# 
   101     010E                     	;# 
   102     010F                     	;# 
   103     018C                     	;# 
   104     018D                     	;# 
   105     0000                     	;# 
   106     0001                     	;# 
   107     0002                     	;# 
   108     0003                     	;# 
   109     0004                     	;# 
   110     0005                     	;# 
   111     0006                     	;# 
   112     0007                     	;# 
   113     0008                     	;# 
   114     0009                     	;# 
   115     000A                     	;# 
   116     000B                     	;# 
   117     000C                     	;# 
   118     000D                     	;# 
   119     000E                     	;# 
   120     000E                     	;# 
   121     000F                     	;# 
   122     0010                     	;# 
   123     0011                     	;# 
   124     0012                     	;# 
   125     0013                     	;# 
   126     0014                     	;# 
   127     0015                     	;# 
   128     0015                     	;# 
   129     0016                     	;# 
   130     0017                     	;# 
   131     0018                     	;# 
   132     0019                     	;# 
   133     001A                     	;# 
   134     001B                     	;# 
   135     001B                     	;# 
   136     001C                     	;# 
   137     001D                     	;# 
   138     001E                     	;# 
   139     001F                     	;# 
   140     0081                     	;# 
   141     0085                     	;# 
   142     0086                     	;# 
   143     0087                     	;# 
   144     0088                     	;# 
   145     0089                     	;# 
   146     008C                     	;# 
   147     008D                     	;# 
   148     008E                     	;# 
   149     0091                     	;# 
   150     0092                     	;# 
   151     0093                     	;# 
   152     0094                     	;# 
   153     0098                     	;# 
   154     0099                     	;# 
   155     009C                     	;# 
   156     009D                     	;# 
   157     009E                     	;# 
   158     009F                     	;# 
   159     010C                     	;# 
   160     010D                     	;# 
   161     010E                     	;# 
   162     010F                     	;# 
   163     018C                     	;# 
   164     018D                     	;# 
   165     0015                     _CCPR1L	set	21
   166     0017                     _CCP1CONbits	set	23
   167     0092                     _TMR2ON	set	146
   168     0091                     _T2CKPS1	set	145
   169     0090                     _T2CKPS0	set	144
   170     00BB                     _CCP1M3	set	187
   171     00BA                     _CCP1M2	set	186
   172     0092                     _PR2	set	146
   173     043A                     _TRISC2	set	1082
   174                           
   175                           	psect	cinit
   176     07FC                     start_initialization:	
   177                           ; #config settings
   178                           
   179     07FC                     __initialization:
   180     07FC                     end_of_initialization:	
   181                           ;End of C runtime variable initialization code
   182                           
   183     07FC                     __end_of__initialization:
   184     07FC  0183               	clrf	3
   185     07FD  120A  118A  2F95   	ljmp	_main	;jump to C main() function
   186                           
   187                           	psect	cstackCOMMON
   188     0070                     __pcstackCOMMON:
   189     0070                     ?_PWM1_SET_DUTY:
   190     0070                     ?_main:	
   191                           ; 1 bytes @ 0x0
   192                           
   193     0070                     PWM1_SET_DUTY@DC:	
   194                           ; 1 bytes @ 0x0
   195                           
   196                           
   197                           ; 2 bytes @ 0x0
   198     0070                     	ds	2
   199     0072                     ??_PWM1_SET_DUTY:
   200                           
   201                           ; 1 bytes @ 0x2
   202     0072                     	ds	2
   203     0074                     ??_main:
   204                           
   205                           ; 1 bytes @ 0x4
   206     0074                     	ds	2
   207     0076                     main@DC:
   208                           
   209                           ; 2 bytes @ 0x6
   210     0076                     	ds	2
   211                           
   212                           	psect	maintext
   213     0795                     __pmaintext:	
   214 ;;
   215 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   216 ;;
   217 ;; *************** function _main *****************
   218 ;; Defined at:
   219 ;;		line 18 in file "main.c"
   220 ;; Parameters:    Size  Location     Type
   221 ;;		None
   222 ;; Auto vars:     Size  Location     Type
   223 ;;  DC              2    6[COMMON] unsigned short 
   224 ;; Return value:  Size  Location     Type
   225 ;;                  1    wreg      void 
   226 ;; Registers used:
   227 ;;		wreg, status,2, status,0, pclath, cstack
   228 ;; Tracked objects:
   229 ;;		On entry : B00/0
   230 ;;		On exit  : 0/0
   231 ;;		Unchanged: 0/0
   232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   233 ;;      Params:         0       0       0       0       0
   234 ;;      Locals:         2       0       0       0       0
   235 ;;      Temps:          2       0       0       0       0
   236 ;;      Totals:         4       0       0       0       0
   237 ;;Total ram usage:        4 bytes
   238 ;; Hardware stack levels required when called: 1
   239 ;; This function calls:
   240 ;;		_PWM1_SET_DUTY
   241 ;; This function is called by:
   242 ;;		Startup code after reset
   243 ;; This function uses a non-reentrant model
   244 ;;
   245                           
   246     0795                     _main:	
   247                           ;psect for function _main
   248                           
   249     0795                     l626:	
   250                           ;incstack = 0
   251                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   252                           
   253                           
   254                           ;main.c: 20:     CCP1M2 = 1;
   255     0795  1283               	bcf	3,5	;RP0=0, select bank0
   256     0796  1303               	bcf	3,6	;RP1=0, select bank0
   257     0797  1517               	bsf	23,2	;volatile
   258                           
   259                           ;main.c: 21:     CCP1M3 = 1;
   260     0798  1597               	bsf	23,3	;volatile
   261                           
   262                           ;main.c: 24:     TRISC2 = 0;
   263     0799  1683               	bsf	3,5	;RP0=1, select bank1
   264     079A  1303               	bcf	3,6	;RP1=0, select bank1
   265     079B  1107               	bcf	7,2	;volatile
   266     079C                     l628:
   267                           
   268                           ;main.c: 25:     PR2 = 124;
   269     079C  307C               	movlw	124
   270     079D  0092               	movwf	18	;volatile
   271     079E                     l630:
   272                           
   273                           ;main.c: 27:     T2CKPS0 = 1;
   274     079E  1283               	bcf	3,5	;RP0=0, select bank0
   275     079F  1303               	bcf	3,6	;RP1=0, select bank0
   276     07A0  1412               	bsf	18,0	;volatile
   277     07A1                     l632:
   278                           
   279                           ;main.c: 28:     T2CKPS1 = 0;
   280     07A1  1092               	bcf	18,1	;volatile
   281     07A2                     l634:
   282                           
   283                           ;main.c: 30:     TMR2ON = 1;
   284     07A2  1512               	bsf	18,2	;volatile
   285     07A3                     l636:
   286     07A3                     l638:
   287                           
   288                           ;main.c: 34:         DC= 0;
   289     07A3  01F6               	clrf	main@DC
   290     07A4  01F7               	clrf	main@DC+1
   291                           
   292                           ;main.c: 37:         while(DC < 500){
   293     07A5  2FBE               	goto	l646
   294     07A6                     l640:
   295                           
   296                           ;main.c: 38:           PWM1_SET_DUTY(DC);
   297     07A6  0877               	movf	main@DC+1,w
   298     07A7  00F1               	movwf	PWM1_SET_DUTY@DC+1
   299     07A8  0876               	movf	main@DC,w
   300     07A9  00F0               	movwf	PWM1_SET_DUTY@DC
   301     07AA  120A  118A  276A  120A  118A  	fcall	_PWM1_SET_DUTY
   302     07AF                     l642:
   303                           
   304                           ;main.c: 39:           DC++;
   305     07AF  3001               	movlw	1
   306     07B0  07F6               	addwf	main@DC,f
   307     07B1  1803               	skipnc
   308     07B2  0AF7               	incf	main@DC+1,f
   309     07B3  3000               	movlw	0
   310     07B4  07F7               	addwf	main@DC+1,f
   311     07B5                     l644:
   312                           
   313                           ;main.c: 40:           _delay((unsigned long)((2)*(4000000/4000.0)));
   314     07B5  3003               	movlw	3
   315     07B6  00F5               	movwf	??_main+1
   316     07B7  3097               	movlw	151
   317     07B8  00F4               	movwf	??_main
   318     07B9                     u77:
   319     07B9  0BF4               	decfsz	??_main,f
   320     07BA  2FB9               	goto	u77
   321     07BB  0BF5               	decfsz	??_main+1,f
   322     07BC  2FB9               	goto	u77
   323     07BD  2FBE               	nop2
   324     07BE                     l646:
   325                           
   326                           ;main.c: 37:         while(DC < 500){
   327     07BE  3001               	movlw	1
   328     07BF  0277               	subwf	main@DC+1,w
   329     07C0  30F4               	movlw	244
   330     07C1  1903               	skipnz
   331     07C2  0276               	subwf	main@DC,w
   332     07C3  1C03               	skipc
   333     07C4  2FC6               	goto	u51
   334     07C5  2FC7               	goto	u50
   335     07C6                     u51:
   336     07C6  2FA6               	goto	l640
   337     07C7                     u50:
   338     07C7                     l648:
   339                           
   340                           ;main.c: 43:         _delay((unsigned long)((100)*(4000000/4000.0)));
   341     07C7  3082               	movlw	130
   342     07C8  00F5               	movwf	??_main+1
   343     07C9  30DD               	movlw	221
   344     07CA  00F4               	movwf	??_main
   345     07CB                     u87:
   346     07CB  0BF4               	decfsz	??_main,f
   347     07CC  2FCB               	goto	u87
   348     07CD  0BF5               	decfsz	??_main+1,f
   349     07CE  2FCB               	goto	u87
   350     07CF  2FD0               	nop2
   351                           
   352                           ;main.c: 46:         while(DC > 0){
   353     07D0  2FE9               	goto	l656
   354     07D1                     l650:
   355                           
   356                           ;main.c: 47:             PWM1_SET_DUTY(DC);
   357     07D1  0877               	movf	main@DC+1,w
   358     07D2  00F1               	movwf	PWM1_SET_DUTY@DC+1
   359     07D3  0876               	movf	main@DC,w
   360     07D4  00F0               	movwf	PWM1_SET_DUTY@DC
   361     07D5  120A  118A  276A  120A  118A  	fcall	_PWM1_SET_DUTY
   362     07DA                     l652:
   363                           
   364                           ;main.c: 48:             DC --;
   365     07DA  3001               	movlw	1
   366     07DB  02F6               	subwf	main@DC,f
   367     07DC  3000               	movlw	0
   368     07DD  1C03               	skipc
   369     07DE  03F7               	decf	main@DC+1,f
   370     07DF  02F7               	subwf	main@DC+1,f
   371     07E0                     l654:
   372                           
   373                           ;main.c: 49:             _delay((unsigned long)((2)*(4000000/4000.0)));
   374     07E0  3003               	movlw	3
   375     07E1  00F5               	movwf	??_main+1
   376     07E2  3097               	movlw	151
   377     07E3  00F4               	movwf	??_main
   378     07E4                     u97:
   379     07E4  0BF4               	decfsz	??_main,f
   380     07E5  2FE4               	goto	u97
   381     07E6  0BF5               	decfsz	??_main+1,f
   382     07E7  2FE4               	goto	u97
   383     07E8  2FE9               	nop2
   384     07E9                     l656:
   385                           
   386                           ;main.c: 46:         while(DC > 0){
   387     07E9  0876               	movf	main@DC,w
   388     07EA  0477               	iorwf	main@DC+1,w
   389     07EB  1D03               	btfss	3,2
   390     07EC  2FEE               	goto	u61
   391     07ED  2FEF               	goto	u60
   392     07EE                     u61:
   393     07EE  2FD1               	goto	l650
   394     07EF                     u60:
   395     07EF                     l658:
   396                           
   397                           ;main.c: 52:         _delay((unsigned long)((100)*(4000000/4000.0)));
   398     07EF  3082               	movlw	130
   399     07F0  00F5               	movwf	??_main+1
   400     07F1  30DD               	movlw	221
   401     07F2  00F4               	movwf	??_main
   402     07F3                     u107:
   403     07F3  0BF4               	decfsz	??_main,f
   404     07F4  2FF3               	goto	u107
   405     07F5  0BF5               	decfsz	??_main+1,f
   406     07F6  2FF3               	goto	u107
   407     07F7  2FF8               	nop2
   408     07F8  2FA3               	goto	l638
   409     07F9  120A  118A  2800   	ljmp	start
   410     07FC                     __end_of_main:
   411                           
   412                           	psect	text1
   413     076A                     __ptext1:	
   414 ;; *************** function _PWM1_SET_DUTY *****************
   415 ;; Defined at:
   416 ;;		line 59 in file "main.c"
   417 ;; Parameters:    Size  Location     Type
   418 ;;  DC              2    0[COMMON] unsigned short 
   419 ;; Auto vars:     Size  Location     Type
   420 ;;		None
   421 ;; Return value:  Size  Location     Type
   422 ;;                  1    wreg      void 
   423 ;; Registers used:
   424 ;;		wreg, status,2, status,0
   425 ;; Tracked objects:
   426 ;;		On entry : 0/0
   427 ;;		On exit  : 0/0
   428 ;;		Unchanged: 0/0
   429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   430 ;;      Params:         2       0       0       0       0
   431 ;;      Locals:         0       0       0       0       0
   432 ;;      Temps:          2       0       0       0       0
   433 ;;      Totals:         4       0       0       0       0
   434 ;;Total ram usage:        4 bytes
   435 ;; Hardware stack levels used: 1
   436 ;; This function calls:
   437 ;;		Nothing
   438 ;; This function is called by:
   439 ;;		_main
   440 ;; This function uses a non-reentrant model
   441 ;;
   442                           
   443     076A                     _PWM1_SET_DUTY:	
   444                           ;psect for function _PWM1_SET_DUTY
   445                           
   446     076A                     l622:	
   447                           ;incstack = 0
   448                           ; Regs used in _PWM1_SET_DUTY: [wreg+status,2+status,0]
   449                           
   450                           
   451                           ;main.c: 69:     if(DC < 1024){
   452     076A  3004               	movlw	4
   453     076B  0271               	subwf	PWM1_SET_DUTY@DC+1,w
   454     076C  3000               	movlw	0
   455     076D  1903               	skipnz
   456     076E  0270               	subwf	PWM1_SET_DUTY@DC,w
   457     076F  1803               	skipnc
   458     0770  2F72               	goto	u41
   459     0771  2F73               	goto	u40
   460     0772                     u41:
   461     0772  2F94               	goto	l40
   462     0773                     u40:
   463     0773                     l624:
   464                           
   465                           ;main.c: 70:         CCP1CONbits.CCP1Y = DC & 1;
   466     0773  0870               	movf	PWM1_SET_DUTY@DC,w
   467     0774  3901               	andlw	1
   468     0775  00F2               	movwf	??_PWM1_SET_DUTY
   469     0776  0EF2               	swapf	??_PWM1_SET_DUTY,f
   470     0777  1283               	bcf	3,5	;RP0=0, select bank0
   471     0778  1303               	bcf	3,6	;RP1=0, select bank0
   472     0779  0817               	movf	23,w	;volatile
   473     077A  0672               	xorwf	??_PWM1_SET_DUTY,w
   474     077B  39EF               	andlw	-17
   475     077C  0672               	xorwf	??_PWM1_SET_DUTY,w
   476     077D  0097               	movwf	23	;volatile
   477                           
   478                           ;main.c: 71:         CCP1CONbits.CCP1X = DC & 2;
   479     077E  0870               	movf	PWM1_SET_DUTY@DC,w
   480     077F  3902               	andlw	2
   481     0780  00F2               	movwf	??_PWM1_SET_DUTY
   482     0781  0EF2               	swapf	??_PWM1_SET_DUTY,f
   483     0782  0DF2               	rlf	??_PWM1_SET_DUTY,f
   484     0783  0817               	movf	23,w	;volatile
   485     0784  0672               	xorwf	??_PWM1_SET_DUTY,w
   486     0785  39DF               	andlw	-33
   487     0786  0672               	xorwf	??_PWM1_SET_DUTY,w
   488     0787  0097               	movwf	23	;volatile
   489                           
   490                           ;main.c: 72:         CCPR1L = DC >> 2;
   491     0788  0871               	movf	PWM1_SET_DUTY@DC+1,w
   492     0789  00F3               	movwf	??_PWM1_SET_DUTY+1
   493     078A  0870               	movf	PWM1_SET_DUTY@DC,w
   494     078B  00F2               	movwf	??_PWM1_SET_DUTY
   495     078C  1003               	clrc
   496     078D  0CF3               	rrf	??_PWM1_SET_DUTY+1,f
   497     078E  0CF2               	rrf	??_PWM1_SET_DUTY,f
   498     078F  1003               	clrc
   499     0790  0CF3               	rrf	??_PWM1_SET_DUTY+1,f
   500     0791  0CF2               	rrf	??_PWM1_SET_DUTY,f
   501     0792  0872               	movf	??_PWM1_SET_DUTY,w
   502     0793  0095               	movwf	21	;volatile
   503     0794                     l40:
   504     0794  0008               	return
   505     0795                     __end_of_PWM1_SET_DUTY:
   506     007E                     btemp	set	126	;btemp
   507     007E                     wtemp0	set	126
   508                           
   509                           	psect	config
   510                           
   511                           ;Config register CONFIG @ 0x2007
   512                           ;	Oscillator Selection bits
   513                           ;	FOSC = XT, XT oscillator
   514                           ;	Watchdog Timer Enable bit
   515                           ;	WDTE = OFF, WDT disabled
   516                           ;	Power-up Timer Enable bit
   517                           ;	PWRTE = ON, PWRT enabled
   518                           ;	Brown-out Reset Enable bit
   519                           ;	BOREN = ON, BOR enabled
   520                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
   521                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
   522                           ;	Data EEPROM Memory Code Protection bit
   523                           ;	CPD = OFF, Data EEPROM code protection off
   524                           ;	Flash Program Memory Write Enable bits
   525                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
   526                           ;	In-Circuit Debugger Mode bit
   527                           ;	DEBUG = 0x1, unprogrammed default
   528                           ;	Flash Program Memory Code Protection bit
   529                           ;	CP = OFF, Code protection off
   530     2007                     	org	8199
   531     2007  3F71               	dw	16241

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8       8
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_PWM1_SET_DUTY

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0     332
                                              4 COMMON     4     4      0
                      _PWM1_SET_DUTY
 ---------------------------------------------------------------------------------
 (1) _PWM1_SET_DUTY                                        4     2      2     240
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PWM1_SET_DUTY

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      8       8       1       57.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Fri Nov 22 10:57:15 2024

                     l40 0794                       u40 0773                       u41 0772  
                     u50 07C7                       u51 07C6                       u60 07EF  
                     u61 07EE                       u77 07B9                       u87 07CB  
                     u97 07E4                      l622 076A                      l630 079E  
                    l624 0773                      l640 07A6                      l632 07A1  
                    l650 07D1                      l642 07AF                      l634 07A2  
                    l626 0795                      l652 07DA                      l644 07B5  
                    l636 07A3                      l628 079C                      l654 07E0  
                    l646 07BE                      l638 07A3                      l656 07E9  
                    l648 07C7                      l658 07EF                      u107 07F3  
                    _PR2 0092                     _main 0795                     btemp 007E  
                   start 0000                    ?_main 0070                    status 0003  
                  wtemp0 007E          __initialization 07FC             __end_of_main 07FC  
                 ??_main 0074                   _CCP1M2 00BA                   _CCP1M3 00BB  
                 _CCPR1L 0015                   _TMR2ON 0092                   _TRISC2 043A  
  __end_of_PWM1_SET_DUTY 0795                   main@DC 0076  __end_of__initialization 07FC  
         __pcstackCOMMON 0070               __pmaintext 0795                  _T2CKPS0 0090  
                _T2CKPS1 0091                  __ptext1 076A     end_of_initialization 07FC  
            _CCP1CONbits 0017      start_initialization 07FC          PWM1_SET_DUTY@DC 0070  
              ___latbits 0002            _PWM1_SET_DUTY 076A           ?_PWM1_SET_DUTY 0070  
        ??_PWM1_SET_DUTY 0072  
